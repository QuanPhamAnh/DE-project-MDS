{
	"name": "Extract_Raw_To_Staging_level3",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "RawProduct",
						"type": "DatasetReference"
					},
					"name": "RawProduct"
				},
				{
					"dataset": {
						"referenceName": "RawExport",
						"type": "DatasetReference"
					},
					"name": "RawExport"
				},
				{
					"dataset": {
						"referenceName": "RawImport",
						"type": "DatasetReference"
					},
					"name": "RawImport"
				},
				{
					"dataset": {
						"referenceName": "Staging_Warehouse",
						"type": "DatasetReference"
					},
					"name": "StagingWarehouse"
				},
				{
					"dataset": {
						"referenceName": "Staging_Product",
						"type": "DatasetReference"
					},
					"name": "StagingProduct"
				},
				{
					"dataset": {
						"referenceName": "Staging_Customer",
						"type": "DatasetReference"
					},
					"name": "StagingCustomer"
				},
				{
					"dataset": {
						"referenceName": "Staging_Supplier",
						"type": "DatasetReference"
					},
					"name": "StagingSupplier"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Staging_Storage",
						"type": "DatasetReference"
					},
					"name": "StagingStorage"
				},
				{
					"dataset": {
						"referenceName": "Staging_Export",
						"type": "DatasetReference"
					},
					"name": "StagingExport"
				},
				{
					"dataset": {
						"referenceName": "Staging_Import",
						"type": "DatasetReference"
					},
					"name": "StagingImport"
				}
			],
			"transformations": [
				{
					"name": "CastTypeProduct"
				},
				{
					"name": "CastTypeExport"
				},
				{
					"name": "CastTypeImport"
				},
				{
					"name": "AddProductSchema"
				},
				{
					"name": "AddStoreID"
				},
				{
					"name": "CastStoreID"
				},
				{
					"name": "JoinStorage"
				},
				{
					"name": "AddExportSchema"
				},
				{
					"name": "JoinExportCust"
				},
				{
					"name": "JoinExportPro"
				},
				{
					"name": "JoinImportSup"
				},
				{
					"name": "JoinImportWH"
				},
				{
					"name": "JoinImportPro"
				},
				{
					"name": "AddImportSchema"
				},
				{
					"name": "Group"
				},
				{
					"name": "AddImportID"
				},
				{
					"name": "CastImportID"
				},
				{
					"name": "SelectImport"
				},
				{
					"name": "AddExportKey"
				},
				{
					"name": "CastExportID"
				},
				{
					"name": "SelectExport"
				},
				{
					"name": "SelProd"
				},
				{
					"name": "SelWH"
				},
				{
					"name": "JoinProd"
				},
				{
					"name": "AddStorageSchema"
				},
				{
					"name": "SelCust"
				},
				{
					"name": "SelSupp"
				}
			],
			"scriptLines": [
				"source(output(",
				"          NoID as string,",
				"          Product_Code as string,",
				"          Product_Name as string,",
				"          Weight as string,",
				"          Product_SubCategory as string,",
				"          Product_Color as string,",
				"          Standard_Cost as string,",
				"          General_Price as string,",
				"          Product_Number as string,",
				"          Import_Flag as string,",
				"          Warehouse_Name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RawProduct",
				"source(output(",
				"          Order_ID as string,",
				"          Quantity as string,",
				"          Date_Order as string,",
				"          Date_Ship as string,",
				"          Date_due as string,",
				"          Ship_Distance as string,",
				"          Ship_Cost as string,",
				"          Product_Code as string,",
				"          username as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RawExport",
				"source(output(",
				"          Import_ID as string,",
				"          Quantity as string,",
				"          Ship_Distance as string,",
				"          Ship_Cost as string,",
				"          ImportDate as string,",
				"          Product_Code as string,",
				"          Warehouse_Name as string,",
				"          SupplierName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RawImport",
				"source(output(",
				"          Warehouse_ID as integer,",
				"          Warehouse_Name as string,",
				"          Warehouse_cost as double,",
				"          Location_ID as integer,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> StagingWarehouse",
				"source(output(",
				"          Product_ID as integer,",
				"          Product_Name as string,",
				"          Product_Category as string,",
				"          Product_Code as integer,",
				"          Weight as double,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> StagingProduct",
				"source(output(",
				"          Customer_ID as integer,",
				"          name as string,",
				"          username as string,",
				"          sex as string,",
				"          mail as string,",
				"          birthdate as timestamp,",
				"          Location_ID as integer,",
				"          Phone as string,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> StagingCustomer",
				"source(output(",
				"          Supplier_ID as integer,",
				"          Supplier_Name as string,",
				"          Location_ID as integer,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> StagingSupplier",
				"Group cast(output(",
				"          Product_Code as integer,",
				"          Weight as double,",
				"          Standard_Cost as double,",
				"          General_Price as double",
				"     ),",
				"     errors: true) ~> CastTypeProduct",
				"RawExport cast(output(",
				"          Quantity as integer,",
				"          Date_Order as date,",
				"          Date_Ship as date,",
				"          Date_due as date,",
				"          Ship_Distance as double,",
				"          Ship_Cost as double,",
				"          Product_Code as integer",
				"     ),",
				"     errors: true) ~> CastTypeExport",
				"RawImport cast(output(",
				"          Quantity as integer,",
				"          Ship_Distance as double,",
				"          Ship_Cost as double,",
				"          ImportDate as date,",
				"          Product_Code as integer",
				"     ),",
				"     errors: true) ~> CastTypeImport",
				"CastTypeProduct derive(uuid = uuid(),",
				"          LastEditedWhen = currentUTC(),",
				"          LastEditedBy = 'devname') ~> AddProductSchema",
				"AddProductSchema keyGenerate(output(Storage_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddStoreID",
				"AddStoreID cast(output(",
				"          Storage_ID as integer",
				"     ),",
				"     errors: true) ~> CastStoreID",
				"JoinProd, SelWH join(Group@Warehouse_Name == SelWH@Warehouse_Name,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinStorage",
				"JoinExportCust derive(uuid = uuid(),",
				"          LastEditedWhen = currentUTC(),",
				"          LastEditedBy = 'devname') ~> AddExportSchema",
				"JoinExportPro, SelCust join(RawExport@username == SelCust@username,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinExportCust",
				"CastTypeExport, SelProd join(CastTypeExport@Product_Code == SelProd@Product_Code,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinExportPro",
				"CastTypeImport, SelSupp join(SupplierName == Supplier_Name,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinImportSup",
				"JoinImportSup, SelWH join(RawImport@Warehouse_Name == SelWH@Warehouse_Name,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinImportWH",
				"JoinImportWH, SelProd join(CastTypeImport@Product_Code == SelProd@Product_Code,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinImportPro",
				"JoinImportPro derive(uuid = uuid(),",
				"          LastEditedWhen = currentUTC(),",
				"          LastEditedBy = 'devname') ~> AddImportSchema",
				"RawProduct aggregate(groupBy(Product_Code),",
				"     NoID = max(NoID),",
				"          Product_Name = max(Product_Name),",
				"          Weight = max(Weight),",
				"          Product_SubCategory = max(Product_SubCategory),",
				"          Product_Color = max(Product_Color),",
				"          Standard_Cost = max(Standard_Cost),",
				"          General_Price = max(General_Price),",
				"          Product_Number = max(Product_Number),",
				"          Import_Flag = max(Import_Flag),",
				"          Warehouse_Name = max(Warehouse_Name)) ~> Group",
				"SelectImport keyGenerate(output(Import_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddImportID",
				"AddImportID cast(output(",
				"          Import_ID as integer",
				"     ),",
				"     errors: true) ~> CastImportID",
				"AddImportSchema select(mapColumn(",
				"          Import_ID,",
				"          Quantity,",
				"          Ship_Distance,",
				"          Ship_Cost,",
				"          ImportDate,",
				"          Product_Code = CastTypeImport@Product_Code,",
				"          Warehouse_Name = RawImport@Warehouse_Name,",
				"          SupplierName,",
				"          Supplier_ID,",
				"          Location_ID = SelSupp@Location_ID,",
				"          Supplier_Name,",
				"          Warehouse_ID,",
				"          Warehouse_Name = SelWH@Warehouse_Name,",
				"          Location_ID = SelWH@Location_ID,",
				"          Product_ID,",
				"          Product_Code = SelProd@Product_Code,",
				"          uuid,",
				"          LastEditedWhen,",
				"          LastEditedBy",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectImport",
				"SelectExport keyGenerate(output(Export_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddExportKey",
				"AddExportKey cast(output(",
				"          Export_ID as integer",
				"     ),",
				"     errors: true) ~> CastExportID",
				"AddExportSchema select(mapColumn(",
				"          Order_ID,",
				"          Quantity,",
				"          Date_Order,",
				"          Date_Ship,",
				"          Date_due,",
				"          Ship_Distance,",
				"          Ship_Cost,",
				"          Product_Code = CastTypeExport@Product_Code,",
				"          username = RawExport@username,",
				"          Product_ID,",
				"          Product_Code = SelProd@Product_Code,",
				"          Customer_ID,",
				"          username = SelCust@username,",
				"          uuid,",
				"          LastEditedWhen,",
				"          LastEditedBy",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectExport",
				"StagingProduct select(mapColumn(",
				"          Product_ID,",
				"          Product_Code",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelProd",
				"StagingWarehouse select(mapColumn(",
				"          Warehouse_ID,",
				"          Warehouse_Name,",
				"          Location_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelWH",
				"CastStoreID, SelProd join(CastTypeProduct@Product_Code == SelProd@Product_Code,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinProd",
				"JoinStorage derive(Quantity = toInteger(99999),",
				"          Capacity = toInteger(99999),",
				"          uuid = uuid(),",
				"          LastModifiedWhen = currentUTC(),",
				"          LastModifiedBy = 'devname') ~> AddStorageSchema",
				"StagingCustomer select(mapColumn(",
				"          Customer_ID,",
				"          username",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelCust",
				"StagingSupplier select(mapColumn(",
				"          Supplier_ID,",
				"          Location_ID,",
				"          Supplier_Name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelSupp",
				"AddStorageSchema sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          StorageID as integer,",
				"          Product_ID as integer,",
				"          Warehouse_ID as integer,",
				"          Capacity as integer,",
				"          Quantity as integer,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          StorageID = Storage_ID,",
				"          Product_ID,",
				"          Warehouse_ID,",
				"          Capacity,",
				"          Quantity,",
				"          uuid,",
				"          LastEditedBy,",
				"          LastEditedWhen",
				"     )) ~> StagingStorage",
				"CastExportID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Order_ID as integer,",
				"          Product_ID as integer,",
				"          Customer_ID as integer,",
				"          Quantity as integer,",
				"          Date_Order as date,",
				"          Date_Ship as date,",
				"          Date_due as date,",
				"          Ship_Distance as double,",
				"          Ship_Cost as double,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Order_ID = Export_ID,",
				"          Product_ID,",
				"          Customer_ID,",
				"          Quantity,",
				"          Date_Order,",
				"          Date_Ship,",
				"          Date_due,",
				"          Ship_Distance,",
				"          Ship_Cost,",
				"          uuid,",
				"          LastEditedBy,",
				"          LastEditedWhen",
				"     )) ~> StagingExport",
				"CastImportID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Import_ID as integer,",
				"          Product_ID as integer,",
				"          Warehouse_ID as integer,",
				"          Supplier_ID as integer,",
				"          Quantity as integer,",
				"          Ship_Distance as double,",
				"          Ship_Cost as double,",
				"          Import_Date as date,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Import_ID,",
				"          Product_ID,",
				"          Warehouse_ID,",
				"          Supplier_ID,",
				"          Quantity,",
				"          Ship_Distance,",
				"          Ship_Cost,",
				"          Import_Date = ImportDate,",
				"          uuid,",
				"          LastEditedBy,",
				"          LastEditedWhen",
				"     )) ~> StagingImport"
			]
		}
	}
}