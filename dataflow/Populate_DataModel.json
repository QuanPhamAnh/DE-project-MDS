{
	"name": "Populate_DataModel",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Staging_Location",
						"type": "DatasetReference"
					},
					"name": "StagingLocation"
				},
				{
					"dataset": {
						"referenceName": "DWH_Location",
						"type": "DatasetReference"
					},
					"name": "DWHLocation"
				},
				{
					"dataset": {
						"referenceName": "Staging_Warehouse",
						"type": "DatasetReference"
					},
					"name": "StagingWarehouse"
				},
				{
					"dataset": {
						"referenceName": "DWH_Warehouse",
						"type": "DatasetReference"
					},
					"name": "DWHWarehouse"
				},
				{
					"dataset": {
						"referenceName": "Staging_Product",
						"type": "DatasetReference"
					},
					"name": "StagingProduct"
				},
				{
					"dataset": {
						"referenceName": "DWH_Product",
						"type": "DatasetReference"
					},
					"name": "DWHProduct"
				},
				{
					"dataset": {
						"referenceName": "Model_Dim_Product",
						"type": "DatasetReference"
					},
					"name": "ExistingDimProduct"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Model_Dim_Location",
						"type": "DatasetReference"
					},
					"name": "DimLocation"
				},
				{
					"dataset": {
						"referenceName": "Model_Dim_Warehouse",
						"type": "DatasetReference"
					},
					"name": "DimWarehouse"
				},
				{
					"dataset": {
						"referenceName": "Model_Dim_Product",
						"type": "DatasetReference"
					},
					"name": "DimProduct"
				}
			],
			"transformations": [
				{
					"name": "JoinLocation",
					"description": "Inner join on 'StagingLocation' and 'DWHLocation'"
				},
				{
					"name": "SelectColLocation"
				},
				{
					"name": "AlterDimLocation",
					"description": "Enable Upsert"
				},
				{
					"name": "JoinWarehouse"
				},
				{
					"name": "JoinLocationWarehouse"
				},
				{
					"name": "SelectColWarehouse"
				},
				{
					"name": "AlterDimWarehouse",
					"description": "Enable Upsert"
				},
				{
					"name": "JoinProduct"
				},
				{
					"name": "SelectColProduct"
				},
				{
					"name": "FilterCurrently"
				},
				{
					"name": "FilterForUpdate"
				},
				{
					"name": "AddHashExisting"
				},
				{
					"name": "AddNewHash"
				},
				{
					"name": "UpdateExisting"
				},
				{
					"name": "MarkAsUpdate",
					"description": "Enable Update"
				},
				{
					"name": "DropUnwanted"
				},
				{
					"name": "NewAndUpdate"
				},
				{
					"name": "AddKey"
				},
				{
					"name": "MaxKey"
				},
				{
					"name": "JoinMaxKey"
				},
				{
					"name": "AddDimCol"
				},
				{
					"name": "DropUnwantedCol"
				},
				{
					"name": "MarkAsInsert",
					"description": "Enable Insert"
				},
				{
					"name": "UnionAll"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Location_ID as integer,",
				"          Address as string,",
				"          Lat as double,",
				"          Long as double,",
				"          City as string,",
				"          Country_code as string,",
				"          Country_name as string,",
				"          States as string,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> StagingLocation",
				"source(output(",
				"          Location_ID as integer,",
				"          Source_Location_ID as integer,",
				"          Address as string,",
				"          Lat as double,",
				"          Long as double,",
				"          City as string,",
				"          Country_code as string,",
				"          Country_name as string,",
				"          States as string,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DWHLocation",
				"source(output(",
				"          Warehouse_ID as integer,",
				"          Warehouse_Name as string,",
				"          Warehouse_cost as double,",
				"          Location_ID as integer,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> StagingWarehouse",
				"source(output(",
				"          Warehouse_ID as integer,",
				"          Source_Warehouse_ID as integer,",
				"          Warehouse_Name as string,",
				"          Warehouse_cost as double,",
				"          Location_ID as integer,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DWHWarehouse",
				"source(output(",
				"          Product_ID as integer,",
				"          Product_Name as string,",
				"          Product_Category as string,",
				"          Product_Code as integer,",
				"          Weight as double,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> StagingProduct",
				"source(output(",
				"          Product_ID as integer,",
				"          Source_Product_ID as integer,",
				"          Product_Name as string,",
				"          Product_Category as string,",
				"          Product_Code as integer,",
				"          Weight as double,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DWHProduct",
				"source(output(",
				"          ProductKey as integer,",
				"          Product_ID as integer,",
				"          Product_Name as string,",
				"          Product_Category as string,",
				"          Product_Code as integer,",
				"          Weight as double,",
				"          Currently as integer,",
				"          StartDate as date,",
				"          EndDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ExistingDimProduct",
				"StagingLocation, DWHLocation join(StagingLocation@Location_ID == Source_Location_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinLocation",
				"JoinLocation select(mapColumn(",
				"          Location_ID = DWHLocation@Location_ID,",
				"          Address = DWHLocation@Address,",
				"          Lat = DWHLocation@Lat,",
				"          Long = DWHLocation@Long,",
				"          City = DWHLocation@City,",
				"          Country_code = DWHLocation@Country_code,",
				"          Country_name = DWHLocation@Country_name,",
				"          States = DWHLocation@States",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColLocation",
				"SelectColLocation alterRow(upsertIf(true())) ~> AlterDimLocation",
				"StagingWarehouse, DWHWarehouse join(StagingWarehouse@Warehouse_ID == Source_Warehouse_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWarehouse",
				"JoinWarehouse, DWHLocation join(DWHWarehouse@Location_ID == DWHLocation@Location_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinLocationWarehouse",
				"JoinLocationWarehouse select(mapColumn(",
				"          Warehouse_ID = DWHWarehouse@Warehouse_ID,",
				"          Warehouse_Name = DWHWarehouse@Warehouse_Name,",
				"          Warehouse_cost = DWHWarehouse@Warehouse_cost,",
				"          Lat,",
				"          Long",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColWarehouse",
				"SelectColWarehouse alterRow(updateIf(true())) ~> AlterDimWarehouse",
				"StagingProduct, DWHProduct join(StagingProduct@Product_ID == Source_Product_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinProduct",
				"JoinProduct select(mapColumn(",
				"          Product_ID = DWHProduct@Product_ID,",
				"          Product_Name = DWHProduct@Product_Name,",
				"          Product_Category = DWHProduct@Product_Category,",
				"          Product_Code = DWHProduct@Product_Code,",
				"          Weight = DWHProduct@Weight",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColProduct",
				"ExistingDimProduct filter(Currently == 1) ~> FilterCurrently",
				"AddHashExisting, AddNewHash exists(AddHashExisting@Hash == AddNewHash@Hash,",
				"     negate:false,",
				"     broadcast: 'auto')~> FilterForUpdate",
				"FilterCurrently derive(Hash = md5(Product_ID,Product_Name,Product_Category,Product_Code,Weight)) ~> AddHashExisting",
				"SelectColProduct derive(Hash = md5(Product_ID,Product_Name,Product_Category,Product_Code,Weight)) ~> AddNewHash",
				"FilterForUpdate derive(Currently = 0,",
				"          EndDate = currentDate()) ~> UpdateExisting",
				"UpdateExisting alterRow(updateIf(true())) ~> MarkAsUpdate",
				"MarkAsUpdate select(mapColumn(",
				"          ProductKey,",
				"          Product_ID,",
				"          Product_Name,",
				"          Product_Category,",
				"          Product_Code,",
				"          Weight,",
				"          Currently,",
				"          StartDate,",
				"          EndDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropUnwanted",
				"AddNewHash, AddHashExisting exists(AddNewHash@Hash == AddHashExisting@Hash,",
				"     negate:true,",
				"     broadcast: 'auto')~> NewAndUpdate",
				"NewAndUpdate keyGenerate(output(ProductKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddKey",
				"AddHashExisting aggregate(MaxProductKey = max(toInteger(byName('ProductKey')))) ~> MaxKey",
				"AddKey, MaxKey join(ProductKey == MaxProductKey || true(),",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinMaxKey",
				"JoinMaxKey derive(Currently = 1,",
				"          ProductKey = toInteger(ProductKey+MaxProductKey),",
				"          StartDate = currentDate(),",
				"          EndDate = toDate(toString(null()))) ~> AddDimCol",
				"AddDimCol select(mapColumn(",
				"          Product_ID,",
				"          Product_Name,",
				"          Product_Category,",
				"          Product_Code,",
				"          Weight,",
				"          ProductKey,",
				"          Currently,",
				"          StartDate,",
				"          EndDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropUnwantedCol",
				"DropUnwantedCol alterRow(insertIf(true())) ~> MarkAsInsert",
				"MarkAsInsert, DropUnwanted union(byName: true)~> UnionAll",
				"AlterDimLocation sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          LocationKey as integer,",
				"          Location_ID as integer,",
				"          Lat as double,",
				"          Long as double,",
				"          Address as string,",
				"          City as string,",
				"          Country_code as string,",
				"          Country_name as string,",
				"          States as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['Location_ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Location_ID,",
				"          Lat,",
				"          Long,",
				"          Address,",
				"          City,",
				"          Country_code,",
				"          Country_name,",
				"          States",
				"     )) ~> DimLocation",
				"AlterDimWarehouse sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          WarehouseKey as integer,",
				"          Warehouse_ID as integer,",
				"          Warehouse_Name as string,",
				"          Warehouse_Cost as double,",
				"          Lat as double,",
				"          Long as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['Warehouse_ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Warehouse_ID,",
				"          Warehouse_Name,",
				"          Warehouse_Cost = Warehouse_cost,",
				"          Lat,",
				"          Long",
				"     )) ~> DimWarehouse",
				"UnionAll sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ProductKey as integer,",
				"          Product_ID as integer,",
				"          Product_Name as string,",
				"          Product_Category as string,",
				"          Product_Code as integer,",
				"          Weight as double,",
				"          Currently as integer,",
				"          StartDate as date,",
				"          EndDate as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ProductKey,",
				"          Product_ID,",
				"          Product_Name,",
				"          Product_Category,",
				"          Product_Code,",
				"          Weight,",
				"          Currently,",
				"          StartDate,",
				"          EndDate",
				"     )) ~> DimProduct"
			]
		}
	}
}