{
	"name": "Extract_Raw_To_Staging",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "RawCustomer",
						"type": "DatasetReference"
					},
					"name": "RawCustomer"
				},
				{
					"dataset": {
						"referenceName": "RawWarehouse",
						"type": "DatasetReference"
					},
					"name": "RawWarehouse"
				},
				{
					"dataset": {
						"referenceName": "RawSupplier",
						"type": "DatasetReference"
					},
					"name": "RawSupplier"
				},
				{
					"dataset": {
						"referenceName": "RawProduct",
						"type": "DatasetReference"
					},
					"name": "RawProduct"
				},
				{
					"dataset": {
						"referenceName": "RawExport",
						"type": "DatasetReference"
					},
					"name": "RawExport"
				},
				{
					"dataset": {
						"referenceName": "RawImport",
						"type": "DatasetReference"
					},
					"name": "RawImport"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Staging_Customer",
						"type": "DatasetReference"
					},
					"name": "StagingCustomer"
				},
				{
					"dataset": {
						"referenceName": "Staging_Location",
						"type": "DatasetReference"
					},
					"name": "StagingLocation"
				},
				{
					"dataset": {
						"referenceName": "Staging_Warehouse",
						"type": "DatasetReference"
					},
					"name": "StagingWarehouse"
				},
				{
					"dataset": {
						"referenceName": "Staging_Product",
						"type": "DatasetReference"
					},
					"name": "StagingProduct"
				},
				{
					"dataset": {
						"referenceName": "Staging_Supplier",
						"type": "DatasetReference"
					},
					"name": "StagingSupplier"
				},
				{
					"dataset": {
						"referenceName": "Staging_Storage",
						"type": "DatasetReference"
					},
					"name": "StagingStorage"
				},
				{
					"dataset": {
						"referenceName": "Staging_Export",
						"type": "DatasetReference"
					},
					"name": "StagingExport"
				},
				{
					"dataset": {
						"referenceName": "Staging_Import",
						"type": "DatasetReference"
					},
					"name": "StagingImport"
				}
			],
			"transformations": [
				{
					"name": "CastTypeCustomer"
				},
				{
					"name": "CastTypeWarehouse"
				},
				{
					"name": "CastTypeProduct"
				},
				{
					"name": "CastTypeExport"
				},
				{
					"name": "CastTypeImport"
				},
				{
					"name": "CustomerLocation"
				},
				{
					"name": "WarehouseLocation"
				},
				{
					"name": "SupplierLocation"
				},
				{
					"name": "AddMissingCol"
				},
				{
					"name": "UnionLocation"
				},
				{
					"name": "CastTypeLocation"
				},
				{
					"name": "AddLocationSchema"
				},
				{
					"name": "AddCustomerSchema"
				},
				{
					"name": "AddWarehouseSchema"
				},
				{
					"name": "AddProductSchema"
				},
				{
					"name": "JoinCustL"
				},
				{
					"name": "AddLocationKey"
				},
				{
					"name": "CastID"
				},
				{
					"name": "AddWHID"
				},
				{
					"name": "CastWHID"
				},
				{
					"name": "JoinWHL"
				},
				{
					"name": "AddCustID"
				},
				{
					"name": "CastCustID"
				},
				{
					"name": "AddProID"
				},
				{
					"name": "CastProID"
				},
				{
					"name": "CastTypeSupplier"
				},
				{
					"name": "AddSupID"
				},
				{
					"name": "CastSupID"
				},
				{
					"name": "JoinSupL"
				},
				{
					"name": "AddSupplierSchema"
				},
				{
					"name": "JoinStorage"
				},
				{
					"name": "AddStorageSchema"
				},
				{
					"name": "AddExportSchema"
				},
				{
					"name": "JoinExportCust"
				},
				{
					"name": "JoinExportPro"
				},
				{
					"name": "JoinImportSup"
				},
				{
					"name": "JoinImportWH"
				},
				{
					"name": "JoinImportPro"
				},
				{
					"name": "AddImportSchema"
				},
				{
					"name": "Deduplicate"
				},
				{
					"name": "Group"
				},
				{
					"name": "AddImportID"
				},
				{
					"name": "CastImportID"
				},
				{
					"name": "SelectImport"
				},
				{
					"name": "AddExportKey"
				},
				{
					"name": "CastExportID"
				},
				{
					"name": "GroupCust"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Customer_ID as string,",
				"          job as string,",
				"          company as string,",
				"          ssn as string,",
				"          residence as string,",
				"          website as string,",
				"          username as string,",
				"          name as string,",
				"          sex as string,",
				"          mail as string,",
				"          birthdate as string,",
				"          Address as string,",
				"          Lat as string,",
				"          Long as string,",
				"          Post_Code as string,",
				"          City as string,",
				"          Country_code as string,",
				"          Country_name as string,",
				"          States as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RawCustomer",
				"source(output(",
				"          Warehouse_ID as string,",
				"          Warehouse_Name as string,",
				"          Warehouse_cost as string,",
				"          Address as string,",
				"          Lat as string,",
				"          Long as string,",
				"          Post_Code as string,",
				"          City as string,",
				"          Country_code as string,",
				"          Country_name as string,",
				"          States as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RawWarehouse",
				"source(output(",
				"          Supplier_ID as string,",
				"          SupplierName as string,",
				"          Address as string,",
				"          States as string,",
				"          Lat as string,",
				"          Long as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RawSupplier",
				"source(output(",
				"          NoID as string,",
				"          Product_Code as string,",
				"          Product_Name as string,",
				"          Weight as string,",
				"          Product_SubCategory as string,",
				"          Product_Color as string,",
				"          Standard_Cost as string,",
				"          General_Price as string,",
				"          Product_Number as string,",
				"          Import_Flag as string,",
				"          Warehouse_Name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RawProduct",
				"source(output(",
				"          Order_ID as string,",
				"          Quantity as string,",
				"          Date_Order as string,",
				"          Date_Ship as string,",
				"          Date_due as string,",
				"          Ship_Distance as string,",
				"          Ship_Cost as string,",
				"          Product_Code as string,",
				"          username as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RawExport",
				"source(output(",
				"          Import_ID as string,",
				"          Quantity as string,",
				"          Ship_Distance as string,",
				"          Ship_Cost as string,",
				"          ImportDate as string,",
				"          Product_Code as string,",
				"          Warehouse_Name as string,",
				"          SupplierName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RawImport",
				"GroupCust cast(output(",
				"          birthdate as date,",
				"          Lat as double,",
				"          Long as double",
				"     ),",
				"     errors: true) ~> CastTypeCustomer",
				"RawWarehouse cast(output(",
				"          Warehouse_cost as double,",
				"          Lat as double,",
				"          Long as double",
				"     ),",
				"     errors: true) ~> CastTypeWarehouse",
				"Group cast(output(",
				"          Product_Code as integer,",
				"          Weight as double,",
				"          Standard_Cost as double,",
				"          General_Price as double",
				"     ),",
				"     errors: true) ~> CastTypeProduct",
				"RawExport cast(output(",
				"          Quantity as integer,",
				"          Date_Order as date,",
				"          Date_Ship as date,",
				"          Date_due as date,",
				"          Ship_Distance as double,",
				"          Ship_Cost as double,",
				"          Product_Code as integer",
				"     ),",
				"     errors: true) ~> CastTypeExport",
				"RawImport cast(output(",
				"          Quantity as integer,",
				"          Ship_Distance as double,",
				"          Ship_Cost as double,",
				"          ImportDate as date,",
				"          Product_Code as integer",
				"     ),",
				"     errors: true) ~> CastTypeImport",
				"GroupCust select(mapColumn(",
				"          Address,",
				"          Lat,",
				"          Long,",
				"          City,",
				"          Country_code,",
				"          Country_name,",
				"          States",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CustomerLocation",
				"RawWarehouse select(mapColumn(",
				"          Address,",
				"          Lat,",
				"          Long,",
				"          City,",
				"          Country_code,",
				"          Country_name,",
				"          States",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> WarehouseLocation",
				"RawSupplier select(mapColumn(",
				"          Address,",
				"          States,",
				"          Lat,",
				"          Long",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SupplierLocation",
				"SupplierLocation derive(City = toString('N/A'),",
				"          Country_code = 'US',",
				"          Country_name = 'America') ~> AddMissingCol",
				"AddMissingCol, CustomerLocation, WarehouseLocation union(byName: true)~> UnionLocation",
				"UnionLocation cast(output(",
				"          Lat as double,",
				"          Long as double",
				"     ),",
				"     errors: true) ~> CastTypeLocation",
				"Deduplicate derive(uuid = uuid(),",
				"          LastEditedBy = 'devname',",
				"          LastEditedWhen = currentUTC()) ~> AddLocationSchema",
				"CastTypeCustomer derive(uuid = uuid(),",
				"          LastEditedBy = 'devname',",
				"          LastEditedWhen = currentUTC()) ~> AddCustomerSchema",
				"CastTypeWarehouse derive(uuid = uuid(),",
				"          LastEditedWhen = currentUTC(),",
				"          LastEditedBy = 'devname') ~> AddWarehouseSchema",
				"CastTypeProduct derive(uuid = uuid(),",
				"          LastEditedWhen = currentUTC(),",
				"          LastEditedBy = 'devname') ~> AddProductSchema",
				"CastCustID, CastID join(CastTypeCustomer@Lat == Deduplicate@Lat",
				"     && CastTypeCustomer@Long == Deduplicate@Long",
				"     && RawCustomer@Address == Deduplicate@Address,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinCustL",
				"AddLocationSchema keyGenerate(output(Location_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddLocationKey",
				"AddLocationKey cast(output(",
				"          Location_ID as integer",
				"     ),",
				"     errors: true) ~> CastID",
				"AddWarehouseSchema keyGenerate(output(Warehouse_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddWHID",
				"AddWHID cast(output(",
				"          Warehouse_ID as integer",
				"     ),",
				"     errors: true) ~> CastWHID",
				"CastWHID, CastID join(CastTypeWarehouse@Lat == Deduplicate@Lat",
				"     && CastTypeWarehouse@Long == Deduplicate@Long",
				"     && RawWarehouse@Address == Deduplicate@Address,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWHL",
				"AddCustomerSchema keyGenerate(output(Customer_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddCustID",
				"AddCustID cast(output(",
				"          Customer_ID as integer",
				"     ),",
				"     errors: true) ~> CastCustID",
				"AddProductSchema keyGenerate(output(Product_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddProID",
				"AddProID cast(output(",
				"          Product_ID as integer",
				"     ),",
				"     errors: true) ~> CastProID",
				"RawSupplier cast(output(",
				"          Lat as double,",
				"          Long as double",
				"     ),",
				"     errors: true) ~> CastTypeSupplier",
				"CastTypeSupplier keyGenerate(output(Supplier_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddSupID",
				"AddSupID cast(output(",
				"          Supplier_ID as integer",
				"     ),",
				"     errors: true) ~> CastSupID",
				"AddSupplierSchema, CastID join(CastTypeSupplier@Lat == Deduplicate@Lat",
				"     && CastTypeSupplier@Long == Deduplicate@Long",
				"     && RawSupplier@Address == Deduplicate@Address,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinSupL",
				"CastSupID derive(LastEditedWhen = currentUTC(),",
				"          LastEditedBy = 'devname',",
				"          uuid = uuid()) ~> AddSupplierSchema",
				"CastProID, CastWHID join(Group@Warehouse_Name == RawWarehouse@Warehouse_Name,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinStorage",
				"JoinStorage derive(LastEditedWhen = currentUTC(),",
				"          LastEditedBy = 'devname',",
				"          uuid = uuid(),",
				"          Capacity = toInteger(9999),",
				"          Quantity = toInteger(9999)) ~> AddStorageSchema",
				"JoinExportCust derive(uuid = uuid(),",
				"          LastEditedWhen = currentUTC(),",
				"          LastEditedBy = 'devname') ~> AddExportSchema",
				"JoinExportPro, CastCustID join(RawExport@username == RawCustomer@username,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinExportCust",
				"CastTypeExport, CastProID join(CastTypeExport@Product_Code == CastTypeProduct@Product_Code,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinExportPro",
				"CastTypeImport, CastSupID join(RawImport@SupplierName == RawSupplier@SupplierName,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinImportSup",
				"JoinImportSup, CastWHID join(RawImport@Warehouse_Name == RawWarehouse@Warehouse_Name,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinImportWH",
				"JoinImportWH, CastProID join(CastTypeImport@Product_Code == CastTypeProduct@Product_Code,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinImportPro",
				"JoinImportPro derive(uuid = uuid(),",
				"          LastEditedWhen = currentUTC(),",
				"          LastEditedBy = 'devname') ~> AddImportSchema",
				"CastTypeLocation select(mapColumn(",
				"          Address,",
				"          States,",
				"          Lat,",
				"          Long,",
				"          City,",
				"          Country_code,",
				"          Country_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Deduplicate",
				"RawProduct aggregate(groupBy(Product_Code),",
				"     NoID = max(NoID),",
				"          Product_Name = max(Product_Name),",
				"          Weight = max(Weight),",
				"          Product_SubCategory = max(Product_SubCategory),",
				"          Product_Color = max(Product_Color),",
				"          Standard_Cost = max(Standard_Cost),",
				"          General_Price = max(General_Price),",
				"          Product_Number = max(Product_Number),",
				"          Import_Flag = max(Import_Flag),",
				"          Warehouse_Name = max(Warehouse_Name)) ~> Group",
				"SelectImport keyGenerate(output(Import_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddImportID",
				"AddImportID cast(output(",
				"          Quantity as integer",
				"     ),",
				"     errors: true) ~> CastImportID",
				"AddImportSchema select(mapColumn(",
				"          Quantity,",
				"          Ship_Distance,",
				"          Ship_Cost,",
				"          ImportDate,",
				"          Product_Code = CastTypeImport@Product_Code,",
				"          Warehouse_Name = RawImport@Warehouse_Name,",
				"          SupplierName = RawImport@SupplierName,",
				"          Supplier_ID,",
				"          SupplierName = RawSupplier@SupplierName,",
				"          Address = RawSupplier@Address,",
				"          States = RawSupplier@States,",
				"          Lat = CastTypeSupplier@Lat,",
				"          Long = CastTypeSupplier@Long,",
				"          Warehouse_ID,",
				"          Warehouse_Name = RawWarehouse@Warehouse_Name,",
				"          Warehouse_cost,",
				"          Address = RawWarehouse@Address,",
				"          Lat = CastTypeWarehouse@Lat,",
				"          Long = CastTypeWarehouse@Long,",
				"          Post_Code,",
				"          City,",
				"          Country_code,",
				"          Country_name,",
				"          States = RawWarehouse@States,",
				"          uuid,",
				"          LastEditedWhen,",
				"          LastEditedBy,",
				"          Product_Code = CastTypeProduct@Product_Code,",
				"          NoID,",
				"          Product_Name,",
				"          Weight,",
				"          Product_SubCategory,",
				"          Product_Color,",
				"          Standard_Cost,",
				"          General_Price,",
				"          Product_Number,",
				"          Import_Flag,",
				"          Warehouse_Name = Group@Warehouse_Name,",
				"          Product_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectImport",
				"AddExportSchema keyGenerate(output(Export_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddExportKey",
				"AddExportKey cast(output(",
				"          Export_ID as integer",
				"     ),",
				"     errors: true) ~> CastExportID",
				"RawCustomer aggregate(groupBy(username),",
				"     Customer_ID = max(Customer_ID),",
				"          job = max(job),",
				"          company = max(company),",
				"          ssn = max(ssn),",
				"          residence = max(residence),",
				"          website = max(website),",
				"          name = max(name),",
				"          sex = max(sex),",
				"          mail = max(mail),",
				"          birthdate = max(birthdate),",
				"          Address = max(Address),",
				"          Lat = max(Lat),",
				"          Long = max(Long),",
				"          Post_Code = max(Post_Code),",
				"          City = max(City),",
				"          Country_code = max(Country_code),",
				"          Country_name = max(Country_name),",
				"          States = max(States)) ~> GroupCust",
				"JoinCustL sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Customer_ID as integer,",
				"          name as string,",
				"          username as string,",
				"          sex as string,",
				"          mail as string,",
				"          birthdate as timestamp,",
				"          Location_ID as integer,",
				"          Phone as string,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Customer_ID,",
				"          name,",
				"          username,",
				"          sex,",
				"          mail,",
				"          birthdate,",
				"          Location_ID,",
				"          Phone = ssn,",
				"          uuid,",
				"          LastEditedBy,",
				"          LastEditedWhen",
				"     )) ~> StagingCustomer",
				"CastID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Location_ID as integer,",
				"          Address as string,",
				"          Lat as double,",
				"          Long as double,",
				"          City as string,",
				"          Country_code as string,",
				"          Country_name as string,",
				"          States as string,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Location_ID,",
				"          Address,",
				"          Lat,",
				"          Long,",
				"          City,",
				"          Country_code,",
				"          Country_name,",
				"          States,",
				"          uuid,",
				"          LastEditedBy,",
				"          LastEditedWhen",
				"     )) ~> StagingLocation",
				"JoinWHL sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Warehouse_ID as integer,",
				"          Warehouse_Name as string,",
				"          Warehouse_cost as double,",
				"          Location_ID as integer,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Warehouse_ID,",
				"          Warehouse_Name,",
				"          Warehouse_cost,",
				"          Location_ID,",
				"          uuid,",
				"          LastEditedBy,",
				"          LastEditedWhen",
				"     )) ~> StagingWarehouse",
				"CastProID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Product_ID as integer,",
				"          Product_Name as string,",
				"          Product_Category as string,",
				"          Product_Code as integer,",
				"          Weight as double,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Product_ID,",
				"          Product_Name,",
				"          Product_Category = Product_SubCategory,",
				"          Product_Code,",
				"          Weight,",
				"          uuid,",
				"          LastEditedBy,",
				"          LastEditedWhen",
				"     )) ~> StagingProduct",
				"JoinSupL sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Supplier_ID as integer,",
				"          Supplier_Name as string,",
				"          Location_ID as integer,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Supplier_ID,",
				"          Supplier_Name = SupplierName,",
				"          Location_ID,",
				"          uuid = AddSupplierSchema@uuid,",
				"          LastEditedBy = AddSupplierSchema@LastEditedBy,",
				"          LastEditedWhen = AddSupplierSchema@LastEditedWhen",
				"     )) ~> StagingSupplier",
				"AddStorageSchema sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          StorageID as integer,",
				"          Product_ID as integer,",
				"          Warehouse_ID as integer,",
				"          Capacity as integer,",
				"          Quantity as integer,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          StorageID = Product_ID,",
				"          Product_ID,",
				"          Warehouse_ID,",
				"          Capacity,",
				"          Quantity,",
				"          uuid,",
				"          LastEditedBy,",
				"          LastEditedWhen",
				"     )) ~> StagingStorage",
				"CastExportID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Order_ID as integer,",
				"          Product_ID as integer,",
				"          Customer_ID as integer,",
				"          Quantity as integer,",
				"          Date_Order as date,",
				"          Date_Ship as date,",
				"          Date_due as date,",
				"          Ship_Distance as double,",
				"          Ship_Cost as double,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Order_ID = Export_ID,",
				"          Product_ID,",
				"          Customer_ID,",
				"          Quantity,",
				"          Date_Order,",
				"          Date_Ship,",
				"          Date_due,",
				"          Ship_Distance,",
				"          Ship_Cost,",
				"          uuid,",
				"          LastEditedBy,",
				"          LastEditedWhen",
				"     )) ~> StagingExport",
				"CastImportID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Import_ID as integer,",
				"          Product_ID as integer,",
				"          Warehouse_ID as integer,",
				"          Supplier_ID as integer,",
				"          Quantity as integer,",
				"          Ship_Distance as double,",
				"          Ship_Cost as double,",
				"          Import_Date as date,",
				"          uuid as string,",
				"          LastEditedBy as string,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Import_ID,",
				"          Product_ID,",
				"          Warehouse_ID,",
				"          Supplier_ID,",
				"          Quantity,",
				"          Ship_Distance,",
				"          Ship_Cost,",
				"          Import_Date = ImportDate,",
				"          uuid,",
				"          LastEditedBy,",
				"          LastEditedWhen",
				"     )) ~> StagingImport"
			]
		}
	}
}